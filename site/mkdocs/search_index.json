{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n#\n\n\nGraphCMS is a GraphQL based headless CMS. It allows you to build rich content APIs within minutes while taking full advantage of the powerful GraphQL language. Your choice: content stored in GraphCMS can be delivered with a \nsimple\n and/or \nrelay compliant\n GraphQL endpoint.\n\n\nGraphCMS allows you to build websites and applications that are not restricted to any specific templating or frontend framework. We store your content and your frontend developers choose how they like to present it. Simply consider GraphCMS as a flexible content management system for your websites, web apps, mobile apps, smartwatch and TV apps and for what is yet to come.\n\n\nIn this docs we will show you how to setup a project, define your content model, manage your content and connect your applications.\n\n\nNew to GraphQL?\n#\n\n\nGraphQL\n is a data query language and runtime designed and used at Facebook to request and deliver data to any kind of websites and apps since 2012.\n\n\nKey Benefits\n#\n\n\nWhy did we choose to build GraphCMS around GraphQL?\n\n\nOne Endpoint to Rule Them All\n#\n\n\nWith GraphQL as a query language, it is up to your client application to specify the shape of the data it requires from the server. A GraphQL query returns exactly what a client asks for and no more. There is just one endpoint on the server that is capable of serving all the data that is requested.\n\n\nDeclarative and Strongly-Typed\n#\n\n\nThe GraphQL type system helps to ensure that your queries are valid at the time of development. This saves you from frustration of invalid queries and boosts your productivity.\n\n\nMinimum Payload\n#\n\n\nSince your application receives only the data it requested, the payload is limited to the minimum. This is especially important in mobile or low bandwidth scenarios. Also communication overhead is reduced: querying a complex content graph, GraphQL will be able to deliver all data in just one round trip.\n\n\nGenerated API Documentation\n#\n\n\nWriting and maintaining API documentation can be cumbersome. With GraphQL, you don't have to worry about documentation at all. Through introspection all of your API documentation will be generated automatically.\n\n\n\n\nIf you want to learn more about GraphQL, we recommend you to visit the \nGraphQL.org\n website as a good starting point.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "GraphCMS is a GraphQL based headless CMS. It allows you to build rich content APIs within minutes while taking full advantage of the powerful GraphQL language. Your choice: content stored in GraphCMS can be delivered with a  simple  and/or  relay compliant  GraphQL endpoint.  GraphCMS allows you to build websites and applications that are not restricted to any specific templating or frontend framework. We store your content and your frontend developers choose how they like to present it. Simply consider GraphCMS as a flexible content management system for your websites, web apps, mobile apps, smartwatch and TV apps and for what is yet to come.  In this docs we will show you how to setup a project, define your content model, manage your content and connect your applications.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#new-to-graphql", 
            "text": "GraphQL  is a data query language and runtime designed and used at Facebook to request and deliver data to any kind of websites and apps since 2012.", 
            "title": "New to GraphQL?"
        }, 
        {
            "location": "/#key-benefits", 
            "text": "Why did we choose to build GraphCMS around GraphQL?", 
            "title": "Key Benefits"
        }, 
        {
            "location": "/#one-endpoint-to-rule-them-all", 
            "text": "With GraphQL as a query language, it is up to your client application to specify the shape of the data it requires from the server. A GraphQL query returns exactly what a client asks for and no more. There is just one endpoint on the server that is capable of serving all the data that is requested.", 
            "title": "One Endpoint to Rule Them All"
        }, 
        {
            "location": "/#declarative-and-strongly-typed", 
            "text": "The GraphQL type system helps to ensure that your queries are valid at the time of development. This saves you from frustration of invalid queries and boosts your productivity.", 
            "title": "Declarative and Strongly-Typed"
        }, 
        {
            "location": "/#minimum-payload", 
            "text": "Since your application receives only the data it requested, the payload is limited to the minimum. This is especially important in mobile or low bandwidth scenarios. Also communication overhead is reduced: querying a complex content graph, GraphQL will be able to deliver all data in just one round trip.", 
            "title": "Minimum Payload"
        }, 
        {
            "location": "/#generated-api-documentation", 
            "text": "Writing and maintaining API documentation can be cumbersome. With GraphQL, you don't have to worry about documentation at all. Through introspection all of your API documentation will be generated automatically.   If you want to learn more about GraphQL, we recommend you to visit the  GraphQL.org  website as a good starting point.", 
            "title": "Generated API Documentation"
        }, 
        {
            "location": "/Concepts/", 
            "text": "Concepts\n#\n\n\nA quick overview on the concepts of GraphCMS.\n\n\nProjects\n#\n\n\nYour content lives within a project. In a project you can:\n\n\n\n\nDefine the shape of your content by adding \ncontent models\n\n\nAdd \nfields\n to your models\n\n\nManage and browse your project\u00b4s content\n\n\nUpload and assign media files\n\n\nInvite others to your team\n\n\nTrack the activities of your team\n\n\nCreate \npermanent auth tokens\n for your applications and content consumers\n\n\nUse the integrated GraphiQL playground to run queries and mutations against your project\u00b4s endpoint\n\n\n\n\nContent Models\n#\n\n\nContent models describe the shape of your content. They consist of several fields while each field can store various types of data (e.g: text, numbers or images). A field can also be a reference to another model, which allows you to build a complex content graph. The fields you associate with a model will also define how its content editing user interface will look like.\n\n\nFields\n#\n\n\nFields are the building blocks of your content models. Each field type can store a specific type of data.\nGraphCMS offers the following field types:\n\n\n\n\nText:\n names, titles, list of names, comments, formatted text, markdown...\n\n\nNumber:\n ID, product number, price, quantity...\n\n\nBoolean:\n true or false, yes or no...\n\n\nDate:\n post date, opening hours, date of birth...\n\n\nEnum:\n selection on a predefined set of values\n\n\nJSON:\n data in JSON format\n\n\nColor:\n rgba or hex color string\n\n\nLocation:\n geographic coordinates: latitude and longitude\n\n\nMedia:\n any asset, e.g. image, video...\n\n\nRelation:\n for referencing other content models. E.g. the author of a blog post\n\n\n\n\n\n\nGraphQL Endpoints\n#\n\n\nAny GraphCMS project comes with two GraphQL endpoints:\n\n\n\n\nThe \nsimple endpoint\n serves your content with a simple GraphQL schema for use with GraphQL clients like \nApollo\n, \nApollo iOS\n or \nLokka\n\n\nThe \nrelay endpoint\n serves your content with a relay conform GraphQL schema for \ndata driven react applications\n  \n\n\n\n\nPermanent Auth Tokens\n#\n\n\nTo connect your client applications to your GraphCMS project, you will need to create a \npermanent auth token\n in your project\u00b4s settings. This will allow your client to:\n\n\n\n\nCREATE\n new content entries\n\n\nREAD\n existing content entries\n\n\nUPDATE\n existing content entries\n\n\nDELETE\n existing content entries\n\n\n\n\n\n\nBe careful! Anyone that knows one of your tokens will be able to execute all of these operations and manipulate your content. So it is never a good idea to store a token on the client side, i.e. a JavaScript client application.\n\n\nWe will soon release a feature that will allow you to create \nread-only tokens\n, so even if someone gains access to such a token, your data will be safe from manipulation.", 
            "title": "Concepts"
        }, 
        {
            "location": "/Concepts/#concepts", 
            "text": "A quick overview on the concepts of GraphCMS.", 
            "title": "Concepts"
        }, 
        {
            "location": "/Concepts/#projects", 
            "text": "Your content lives within a project. In a project you can:   Define the shape of your content by adding  content models  Add  fields  to your models  Manage and browse your project\u00b4s content  Upload and assign media files  Invite others to your team  Track the activities of your team  Create  permanent auth tokens  for your applications and content consumers  Use the integrated GraphiQL playground to run queries and mutations against your project\u00b4s endpoint", 
            "title": "Projects"
        }, 
        {
            "location": "/Concepts/#content-models", 
            "text": "Content models describe the shape of your content. They consist of several fields while each field can store various types of data (e.g: text, numbers or images). A field can also be a reference to another model, which allows you to build a complex content graph. The fields you associate with a model will also define how its content editing user interface will look like.", 
            "title": "Content Models"
        }, 
        {
            "location": "/Concepts/#fields", 
            "text": "Fields are the building blocks of your content models. Each field type can store a specific type of data.\nGraphCMS offers the following field types:   Text:  names, titles, list of names, comments, formatted text, markdown...  Number:  ID, product number, price, quantity...  Boolean:  true or false, yes or no...  Date:  post date, opening hours, date of birth...  Enum:  selection on a predefined set of values  JSON:  data in JSON format  Color:  rgba or hex color string  Location:  geographic coordinates: latitude and longitude  Media:  any asset, e.g. image, video...  Relation:  for referencing other content models. E.g. the author of a blog post", 
            "title": "Fields"
        }, 
        {
            "location": "/Concepts/#graphql-endpoints", 
            "text": "Any GraphCMS project comes with two GraphQL endpoints:   The  simple endpoint  serves your content with a simple GraphQL schema for use with GraphQL clients like  Apollo ,  Apollo iOS  or  Lokka  The  relay endpoint  serves your content with a relay conform GraphQL schema for  data driven react applications", 
            "title": "GraphQL Endpoints"
        }, 
        {
            "location": "/Concepts/#permanent-auth-tokens", 
            "text": "To connect your client applications to your GraphCMS project, you will need to create a  permanent auth token  in your project\u00b4s settings. This will allow your client to:   CREATE  new content entries  READ  existing content entries  UPDATE  existing content entries  DELETE  existing content entries    Be careful! Anyone that knows one of your tokens will be able to execute all of these operations and manipulate your content. So it is never a good idea to store a token on the client side, i.e. a JavaScript client application.  We will soon release a feature that will allow you to create  read-only tokens , so even if someone gains access to such a token, your data will be safe from manipulation.", 
            "title": "Permanent Auth Tokens"
        }, 
        {
            "location": "/Getting_Started/", 
            "text": "Getting Started\n#\n\n\nBuilding a content API with GraphCMS is easy! In this getting started guide we will present how to quickly build a content API for a music blog.\n\n\nCreating a Project\n#\n\n\nWe start off by creating a new project called \nVinylbase\n.\n\n\n\n\n\n\nProject names can contain only alphanumeric characters and whitespaces.\n\n\n\n\nCreating Content Models\n#\n\n\nAfter creating the project, switch to the \nCONTENT\n view and use the \nADD MODEL\n button to add the following models:\n\n\n\n\nArist\n\n\nRecord\n\n\nReview\n\n\nRecord Store\n\n\n\n\n\n\n\n\nAPI IDs for models must start with a capital letter and can contain only alphanumeric characters. No whitespaces allowed.\n\n\n\n\nAdding Fields to your Content Models\n#\n\n\nBefore we can populate our content models with content, we need to add fields to them. This can be done by clicking on the small gear icon next to the content model in the sidebar or by clicking on a content model and then clicking the \nEDIT FIELDS\n button.\n\n\nDoing so will open up the \nField Wizard\n. Here we can specify the types, appearance, API identifiers and additional rules for the fields we add to our content model.\n\n\n\n\nFields for model Artist\n#\n\n\nFor content model \nArtist\n, we will add three fields:\n\n\n\n\nName\n\n\nPictures\n\n\nRecords\n\n\n\n\nFor \nName\n we use a \nSingle Line Text Field\n that we set as \nrequired\n. The \nDisplay Name\n allows you define how the field will be displayed in the web interface, while the \nAPI ID\n defines how the field will be named in your content API.\n\n\n\n\n\n\nIn the web interface, API IDs are prefixed with a \n#\n (e.g.: \n#name\n).\n\n\nAPI IDs for fields must start with a lowercase letter and can contain only alphanumeric characters.\n\n\n\n\nFor field \nPictures\n we will add a media field and check \nAllow multiple values\n, this will allow us to store an arbitrary number of media files.\n\n\nWe will now add a relation to this model. Relations allow you to connect two content models. In this case, we create an \nArtistRecord Relation\n, since we want to connect artists to existing records. The \nRelation Name\n defines how the relation will be named in your content API.\n\n\n\n\nWe will set up the relation so that an \nArtist\n can have \nmany\n \n#records\n, while on the reverse side, a \nRecord\n can also have \nmany\n \n#artists\n.\n\n\n\n\nRelation names must start with a capital letter and can contain only alphanumeric characters\n\n\n\n\nYou can now see all fields that are attached to model.\n\n\n\n\n\n\nNotice that there are three additional fields: \nID\n, \nCreatedAt\n and \nUpdatedAt\n. These are system fields and cannot be removed or modified.\n\n\n\n\nFields for model Record\n#\n\n\nThis model will store content for music records. The fields will be:\n\n\n\n\nTitle \n#title\n \nSingle Line Text\n \nrequired\n\n\nTracklist \n#tracklist\n \nSingle Line Text\n \nAllow multiple values\n\n\nCover \n#cover\n \nMedia\n\n\n\n\nNoticed the relation field with API ID \n#artists\n on this model? This field entry is here because it is the \nreverse side\n of the \nArtistRecord Relation\n we created before. Since we are building a GraphQL content API, we need to be able to traverse in both directions.\n\n\nFields for model Review\n#\n\n\nFor content model \nReview\n, we add the following fields:\n\n\n\n\nTitle \n#title\n \nSingle Line Text\n \nrequired\n\n\nRecord \n#record\n \nOne-to-Many Relation on model Record\n. This will again add another reverse relation field on model \nRecord\n, which we named \n#reviews\n\n\nReview \n#review\n \nMarkdown Text\n\n\n\n\nFields for model Record Store\n#\n\n\nThe last content model that we are going to configure will store information about record stores and the records they have in stock.\n\n\nField configuration:\n\n\n\n\nName \n#name\n \nSingle Line Text\n \nrequired\n\n\nLocation \n#location\n \nMarkdown Text\n\n\nArticles \n#articles\n \nMany-to-Many Relation on model Record\n. This will again add another reverse relation field on model \nRecord\n, which we named \n#stores\n.\n\n\n\n\nGreat! We can now start to create our content.\n\n\nCreating Content\n#\n\n\nWe will start by adding a \nContent Entry\n of type \nRecord\n. We can do so by clicking on the small plus icon next to the model in the sidebar or by clicking the model and then clicking on the \nNEW ENTRY\n button.\n\n\nCreating a \nrecord\n#\n\n\nWe are now able to use the input form elements to populate our content. The presentation of the input fields depend on the field configuration we did before.\nFor example, field \n#cover\n is of type \nMedia\n, so it will allow you to upload media to your project and attach it to your record.\n\n\n\n\n\n\nBefore uploading, you can crop pictures within the upload widget.\n\n\nAll uploaded files can be found in the \nMEDIA\n section.\n\n\n\n\nWe will leave the relation fields blank for now, since we don\u00b4t have any content entries that could be assigned.\n\n\nWe can save the entry now by clicking the \nSAVE\n button. This will take us to the overview of our \nRecord\n content entries.\n\n\nCreating an \nartist\n#\n\n\nNow let us create a \nContent Entry\n of type \nArtist\n. We do this in the same way as we did with the \nRecord Entry\n. Except this time we will be able to assign an entry to the relation field \n#records\n. Let\u00b4s assign the record we created previously!\n\n\n\n\nCreating a \nreview\n#\n\n\nLet us now add a review to \nHannah Popanna\u00b4s\n new record. Here we can use a markdown editor to write a sophisticated critique.\n\n\n\n\nCreating a \nrecord store\n#\n\n\nAlmost done! In the last step, we create an entry for a \nRecord Store\n. To add a location to it, we can use the maps widget.\n\n\nCool. Now that we are done with our content creation, let\u00b4s start to explore our GraphQL content API in the \nAPI EXPLORER\n\n\n\n\nExploring the Content API\n#\n\n\nIn the \nAPI EXPLORER\n, we can switch between the \nsimple\n GraphQL endpoint and the \nrelay\n endpoint. Both endpoints are serving our project\u00b4s content, but in different ways. For now, we will choose the \nsimple\n endpoint.\n\n\nWe can start typing in a GraphQL query with the integrated GraphiQL editor. Let us send the following query to the server:\n\n\n{\n  allRecordStores {\n    name\n    location\n    articles {\n      title\n      cover {\n        fileName\n        url\n      }\n      tracklist\n      artists {\n        name\n        pictures {\n          url\n          size\n        }\n      }\n      reviews {\n        title\n        review\n      }\n    }\n  }\n}\n\n\n\n\n\nWill respond with:\n\n\n{\n\n  \ndata\n:\n \n{\n\n    \nallRecordStores\n:\n \n[\n\n      \n{\n\n        \nname\n:\n \nChampionship Vinyl\n,\n\n        \nlocation\n:\n \n{\n\n          \nlat\n:\n \n50.81655790000001\n,\n\n          \nlng\n:\n \n8.76931209999998\n\n        \n},\n\n        \narticles\n:\n \n[\n\n          \n{\n\n            \ntracklist\n:\n \n[\n\n              \nBar blues\n,\n\n              \nA Walk\n,\n\n              \nShine On You Crazy Supernova\n\n            \n],\n\n            \ncover\n:\n \n{\n\n              \nfileName\n:\n \npexels-photo-300849.jpeg\n,\n\n              \nurl\n:\n \nhttps://media.graphcms.com/2D1bXQZLTiGY6Uz8LUqB\n\n            \n},\n\n            \nartists\n:\n \n[\n\n              \n{\n\n                \nname\n:\n \nHannah Popanna\n,\n\n                \npictures\n:\n \n[\n\n                  \n{\n\n                    \nurl\n:\n \nhttps://media.graphcms.com/kgxzNRIIQUanwoBugK5O\n,\n\n                    \nsize\n:\n \n3258909\n\n                  \n}\n\n                \n]\n\n              \n}\n\n            \n],\n\n            \nreviews\n:\n \n[\n\n              \n{\n\n                \ntitle\n:\n \nHannah Popanna\u00b4s new record is da bomb!\n,\n\n                \nreview\n:\n \n# Great stuff!\\n\\nHannah Popanna\u00b4s new record is amazing! Also, I like her hat!\n\n              \n}\n\n            \n],\n\n            \ntitle\n:\n \nTunes from the Void\n\n          \n}\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n}\n\n\n}\n\n\n\n\n\n\nCool! We can now start building our frontend application. Switch over to the \nSETTINGS\n menu to see your endpoint \nURLs\n and create \nPermanent Auth Tokens\n for your applications.\n\n\n\n\nA full code example will be available soon.\n\n\n\n\nGraphCMS is still in early preview. If you run into an issue, please have a look at the known issues in our \nissue tracker\n. Please don\u00b4t hesitate to open a bug ticket if you experienced an issue that is not covered by those in the tracker.\n\n\n\n\n\n\nIn case you want to know more about the features we are currently working on, please check our public \nroadmap\n.  If you are missing a feature or if you have an idea for additional functionality, please help us to improve by submitting a feature request to this repository.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Getting_Started/#getting-started", 
            "text": "Building a content API with GraphCMS is easy! In this getting started guide we will present how to quickly build a content API for a music blog.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Getting_Started/#creating-a-project", 
            "text": "We start off by creating a new project called  Vinylbase .    Project names can contain only alphanumeric characters and whitespaces.", 
            "title": "Creating a Project"
        }, 
        {
            "location": "/Getting_Started/#creating-content-models", 
            "text": "After creating the project, switch to the  CONTENT  view and use the  ADD MODEL  button to add the following models:   Arist  Record  Review  Record Store     API IDs for models must start with a capital letter and can contain only alphanumeric characters. No whitespaces allowed.", 
            "title": "Creating Content Models"
        }, 
        {
            "location": "/Getting_Started/#adding-fields-to-your-content-models", 
            "text": "Before we can populate our content models with content, we need to add fields to them. This can be done by clicking on the small gear icon next to the content model in the sidebar or by clicking on a content model and then clicking the  EDIT FIELDS  button.  Doing so will open up the  Field Wizard . Here we can specify the types, appearance, API identifiers and additional rules for the fields we add to our content model.", 
            "title": "Adding Fields to your Content Models"
        }, 
        {
            "location": "/Getting_Started/#fields-for-model-artist", 
            "text": "For content model  Artist , we will add three fields:   Name  Pictures  Records   For  Name  we use a  Single Line Text Field  that we set as  required . The  Display Name  allows you define how the field will be displayed in the web interface, while the  API ID  defines how the field will be named in your content API.    In the web interface, API IDs are prefixed with a  #  (e.g.:  #name ).  API IDs for fields must start with a lowercase letter and can contain only alphanumeric characters.   For field  Pictures  we will add a media field and check  Allow multiple values , this will allow us to store an arbitrary number of media files.  We will now add a relation to this model. Relations allow you to connect two content models. In this case, we create an  ArtistRecord Relation , since we want to connect artists to existing records. The  Relation Name  defines how the relation will be named in your content API.   We will set up the relation so that an  Artist  can have  many   #records , while on the reverse side, a  Record  can also have  many   #artists .   Relation names must start with a capital letter and can contain only alphanumeric characters   You can now see all fields that are attached to model.    Notice that there are three additional fields:  ID ,  CreatedAt  and  UpdatedAt . These are system fields and cannot be removed or modified.", 
            "title": "Fields for model Artist"
        }, 
        {
            "location": "/Getting_Started/#fields-for-model-record", 
            "text": "This model will store content for music records. The fields will be:   Title  #title   Single Line Text   required  Tracklist  #tracklist   Single Line Text   Allow multiple values  Cover  #cover   Media   Noticed the relation field with API ID  #artists  on this model? This field entry is here because it is the  reverse side  of the  ArtistRecord Relation  we created before. Since we are building a GraphQL content API, we need to be able to traverse in both directions.", 
            "title": "Fields for model Record"
        }, 
        {
            "location": "/Getting_Started/#fields-for-model-review", 
            "text": "For content model  Review , we add the following fields:   Title  #title   Single Line Text   required  Record  #record   One-to-Many Relation on model Record . This will again add another reverse relation field on model  Record , which we named  #reviews  Review  #review   Markdown Text", 
            "title": "Fields for model Review"
        }, 
        {
            "location": "/Getting_Started/#fields-for-model-record-store", 
            "text": "The last content model that we are going to configure will store information about record stores and the records they have in stock.  Field configuration:   Name  #name   Single Line Text   required  Location  #location   Markdown Text  Articles  #articles   Many-to-Many Relation on model Record . This will again add another reverse relation field on model  Record , which we named  #stores .   Great! We can now start to create our content.", 
            "title": "Fields for model Record Store"
        }, 
        {
            "location": "/Getting_Started/#creating-content", 
            "text": "We will start by adding a  Content Entry  of type  Record . We can do so by clicking on the small plus icon next to the model in the sidebar or by clicking the model and then clicking on the  NEW ENTRY  button.", 
            "title": "Creating Content"
        }, 
        {
            "location": "/Getting_Started/#creating-a-record", 
            "text": "We are now able to use the input form elements to populate our content. The presentation of the input fields depend on the field configuration we did before.\nFor example, field  #cover  is of type  Media , so it will allow you to upload media to your project and attach it to your record.    Before uploading, you can crop pictures within the upload widget.  All uploaded files can be found in the  MEDIA  section.   We will leave the relation fields blank for now, since we don\u00b4t have any content entries that could be assigned.  We can save the entry now by clicking the  SAVE  button. This will take us to the overview of our  Record  content entries.", 
            "title": "Creating a record"
        }, 
        {
            "location": "/Getting_Started/#creating-an-artist", 
            "text": "Now let us create a  Content Entry  of type  Artist . We do this in the same way as we did with the  Record Entry . Except this time we will be able to assign an entry to the relation field  #records . Let\u00b4s assign the record we created previously!", 
            "title": "Creating an artist"
        }, 
        {
            "location": "/Getting_Started/#creating-a-review", 
            "text": "Let us now add a review to  Hannah Popanna\u00b4s  new record. Here we can use a markdown editor to write a sophisticated critique.", 
            "title": "Creating a review"
        }, 
        {
            "location": "/Getting_Started/#creating-a-record-store", 
            "text": "Almost done! In the last step, we create an entry for a  Record Store . To add a location to it, we can use the maps widget.  Cool. Now that we are done with our content creation, let\u00b4s start to explore our GraphQL content API in the  API EXPLORER", 
            "title": "Creating a record store"
        }, 
        {
            "location": "/Getting_Started/#exploring-the-content-api", 
            "text": "In the  API EXPLORER , we can switch between the  simple  GraphQL endpoint and the  relay  endpoint. Both endpoints are serving our project\u00b4s content, but in different ways. For now, we will choose the  simple  endpoint.  We can start typing in a GraphQL query with the integrated GraphiQL editor. Let us send the following query to the server:  {\n  allRecordStores {\n    name\n    location\n    articles {\n      title\n      cover {\n        fileName\n        url\n      }\n      tracklist\n      artists {\n        name\n        pictures {\n          url\n          size\n        }\n      }\n      reviews {\n        title\n        review\n      }\n    }\n  }\n}  Will respond with:  { \n   data :   { \n     allRecordStores :   [ \n       { \n         name :   Championship Vinyl , \n         location :   { \n           lat :   50.81655790000001 , \n           lng :   8.76931209999998 \n         }, \n         articles :   [ \n           { \n             tracklist :   [ \n               Bar blues , \n               A Walk , \n               Shine On You Crazy Supernova \n             ], \n             cover :   { \n               fileName :   pexels-photo-300849.jpeg , \n               url :   https://media.graphcms.com/2D1bXQZLTiGY6Uz8LUqB \n             }, \n             artists :   [ \n               { \n                 name :   Hannah Popanna , \n                 pictures :   [ \n                   { \n                     url :   https://media.graphcms.com/kgxzNRIIQUanwoBugK5O , \n                     size :   3258909 \n                   } \n                 ] \n               } \n             ], \n             reviews :   [ \n               { \n                 title :   Hannah Popanna\u00b4s new record is da bomb! , \n                 review :   # Great stuff!\\n\\nHannah Popanna\u00b4s new record is amazing! Also, I like her hat! \n               } \n             ], \n             title :   Tunes from the Void \n           } \n         ] \n       } \n     ] \n   }  }   Cool! We can now start building our frontend application. Switch over to the  SETTINGS  menu to see your endpoint  URLs  and create  Permanent Auth Tokens  for your applications.   A full code example will be available soon.   GraphCMS is still in early preview. If you run into an issue, please have a look at the known issues in our  issue tracker . Please don\u00b4t hesitate to open a bug ticket if you experienced an issue that is not covered by those in the tracker.    In case you want to know more about the features we are currently working on, please check our public  roadmap .  If you are missing a feature or if you have an idea for additional functionality, please help us to improve by submitting a feature request to this repository.", 
            "title": "Exploring the Content API"
        }, 
        {
            "location": "/Media/", 
            "text": "Media\n#\n\n\nWorking with media is an essential part of content management. GraphCMS allows you to upload and assign media files to any content model in your project. The uploaded files will be assigned to the project\u00b4s internal \nMedia\n model. \nMedia fields\n will then connect the dots between a content model and assigned files.\n\n\nMedia files that are stored in GraphCMS are served via a global content delivery network. This assures quick response times and fast loading of your media.\n\n\n\n\nQuerying a Media Field\n#\n\n\nUploaded media files can be queried from your content API. Let\u00b4s assume we have a content model \nPost\n, with a field configuration of:\n\n\n\n\nTitle \n#title\n \nSingle Line Text\n\n\nImages \n#images\n \nMedia\n \nAllow Multiple Values\n\n\n\n\nThis will allow us to store an arbitrary number of images for a \nPost\n.\n\n\nWe can fetch \nallPosts\n with the following query:\n\n\n{\n  allPosts {\n    title\n    images {\n      fileName\n      handle\n      url\n      mimeType\n      size\n    }\n  }\n}\n\n\n\n\n\nWhich will give us a result like this:\n\n\n{\n  \ndata\n: {\n    \nallPosts\n: [\n      {\n        \ntitle\n: \nSome nice post\n,\n        \nimages\n: [\n          {\n            \nfileName\n: \npexels-photo-295821.jpeg\n,\n            \nhandle\n: \n7AmzJToStuJrNqkpPSWO\n\n            \nurl\n: \nhttps://media.graphcms.com/7AmzJToStuJrNqkpPSWO\n,\n            \nmimeType\n: \nimage/jpeg\n,\n            \nsize\n: 100075,\n          }\n        ]\n      }\n    ]\n  }\n}\n\n\n\n\n\nField \n#images\n will return an array of media objects, which contain the fields:\n\n\n\n\nfileName\n the original file name of the uploaded file\n\n\nhandle\n the identifier of the uploaded file\n\n\nurl\n the full URL to the uploaded file\n\n\nmimeType\n the media type of the uploaded file\n\n\nsize\n the total size in bytes\n\n\n\n\n\n\nIf you know the desired display size of your images, it is highly recommended to use our integrated image transformation engine to scale your images to the desired size. This will increase the loading time of your content and result in a better user experience for your visitors.\n\n\n\n\nGraphCMS Image Transformations\n#\n\n\nAn essential feature of GraphCMS is the image processing engine. It enables you on the fly image transformations, such as resizing or cropping just by adding parameters to your media\u00b4s URL.\n\n\nTransformation URL Structure with GraphCMS Handle\n#\n\n\nhttps://media.graphcms.com/[(1) Transformation Tasks]/[(2) File Handle]\n\n\n\n\n\n1) One or multiple transformation tasks and their parameters\n\n\n2) The source image to run the transformation tasks on.\n\n\nAvailable Transformations\n#\n\n\nAn overview of supported image transformations.\n\n\n\n\nThe maximum accepted image size is 100.000.000 pixels. An image with this many pixels could have width and height combinations like 10.000 x 10.000 or 5.000 x 20.000, etc. The maximum file size of an image can not be larger than 256mb.\n\n\n\n\nResize Fit and Align\n#\n\n\nThe resizing feature comprises two main functions, manipulating the width and height of an image and changing the fit and alignment of the image.\n\n\nResize\n \nTask\n \nURL\n \nFormat\n:\n\n\nhttps\n:\n//media.graphcms.com/resize=[options]/[File Handle]\n\n\n\n\n\n\n\n\nBasic resize example with a GraphCMS file handle\n\n\nhttps://media.graphcms.com/resize=width:300/bYbYJmGyQfynUBaBkRnP\n\n\n\n\n\n\n\n\n\n\n\nresize=width:100\n\n\n\n\nCan be abbreviated as \nw:100\n\n\nThe width in pixels to resize the image to. The value must be an integer from 1 to 10000.\n\n\n\n\n\n\n\n\n\n\n\nresize=height:100\n\n\n\n\nCan be abbreviated as \nh:100\n\n\nThe height in pixels to resize the image to. The value must be an integer from 1 to 10000.\n\n\n\n\n\n\n\n\n\n\n\nresize=fit:clip, crop, scale, or max\n\n\n\n\nCan be abbreviated as \nf:clip\n\n\nThe default value for the fit parameter is \nfit:clip\n.\n\n\n\n\nfit:clip\n\n\n\n\nResizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.\n\n\n\n\nfit:crop\n\n\n\n\nResizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.\n\n\n\n\nfit:scale\n\n\n\n\nResizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.\n\n\n\n\nfit:max\n\n\n\n\nResizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.\n\n\n\n\n\n\n\n\n\n\n\nresize=align:center, top, bottom, left, right, or faces\n\n\n\n\nCan be abbreviated as \na:top\n\n\nUsing align, you can choose the area of the image to focus on. Possible values:\n\nalign:center\n \nalign:top\n \nalign:bottom\n \nalign:left\n \nalign:right\n \nalign:faces\n\n\nBy default, it crops from the center.\nYou can also specify pairs e.g. align:[top,left]. Center cannot be used in pairs.\n\n\n\n\n\n\n\n\n\n\n\nExample with \nresize\n + \nfit:crop\n\n\nhttps://media.graphcms.com/resize=w:300,h:300,fit:crop/bYbYJmGyQfynUBaBkRnP\n\n\n\n\n\n\nCrop\n#\n\n\nCropping is done by entering coordinates for where the boundary of the crop will be.\n\n\nCrop\n \nTask\n \nURL\n \nFormat\n:\n\n\nhttps\n:\n//media.graphcms.com/crop=[options]/[File Handle]\n\n\n\n\n\n\n\n\ncrop=dim:[x,y,width,height]\n\n\n\n\nCan be abbreviated as \nd:[10,20,200,250]\n\n\nCrops the image to a specified rectangle.\n\n\nThe input for this parameter must be exactly 4 integers: \nx coordinate, y coordinate, width, height\n. For example, an input of \ncrop=dim:[10,20,200,250]\n selects a 200x250 pixel rectangle starting 10 pixels from the left edge of the image and 20 pixels from the top edge of the image.\n\n\n\n\n\n\nHow cropping works\n#\n\n\nThe X and Y coordinates start from [0,0] and correspond to the top left hand corner of the image to be cropped. The Width and Height parameters dictate the size in pixels of the cropping rectangle once the point to start the crop at is selected by the X and Y coordinates. If you set coordinates that create a crop area that extends outside the frame of the image, then you will only receive back the part of the image that is within the crop area.\n\n\n\n\n\n\n\nCropping Example\n\n\nOriginal Image:\n\nhttps://media.graphcms.com/resize=w:500/bXa8m7oYQdmyWpmo2I2B\n\n\n\n\nCropped Image\n\nhttps://media.graphcms.com/crop=dim:[2000,900,1800,1300]/resize=w:500/bXa8m7oYQdmyWpmo2I2B\n\n\n\n\n\n\nChaining Transformations\n#\n\n\nThe transformation engine also supports task chaining. This allows you to apply multiple transformations on an image. This is simply done by seperating transformations with a \n/\n.\n\n\nURL\n \nformat\n \nfor\n \nchaining\n:\n\n\nhttps\n:\n//media.graphcms.com/[task]=[options]/[task]=[options]/[File Handle]", 
            "title": "Media"
        }, 
        {
            "location": "/Media/#media", 
            "text": "Working with media is an essential part of content management. GraphCMS allows you to upload and assign media files to any content model in your project. The uploaded files will be assigned to the project\u00b4s internal  Media  model.  Media fields  will then connect the dots between a content model and assigned files.  Media files that are stored in GraphCMS are served via a global content delivery network. This assures quick response times and fast loading of your media.", 
            "title": "Media"
        }, 
        {
            "location": "/Media/#querying-a-media-field", 
            "text": "Uploaded media files can be queried from your content API. Let\u00b4s assume we have a content model  Post , with a field configuration of:   Title  #title   Single Line Text  Images  #images   Media   Allow Multiple Values   This will allow us to store an arbitrary number of images for a  Post .  We can fetch  allPosts  with the following query:  {\n  allPosts {\n    title\n    images {\n      fileName\n      handle\n      url\n      mimeType\n      size\n    }\n  }\n}  Which will give us a result like this:  {\n   data : {\n     allPosts : [\n      {\n         title :  Some nice post ,\n         images : [\n          {\n             fileName :  pexels-photo-295821.jpeg ,\n             handle :  7AmzJToStuJrNqkpPSWO \n             url :  https://media.graphcms.com/7AmzJToStuJrNqkpPSWO ,\n             mimeType :  image/jpeg ,\n             size : 100075,\n          }\n        ]\n      }\n    ]\n  }\n}  Field  #images  will return an array of media objects, which contain the fields:   fileName  the original file name of the uploaded file  handle  the identifier of the uploaded file  url  the full URL to the uploaded file  mimeType  the media type of the uploaded file  size  the total size in bytes    If you know the desired display size of your images, it is highly recommended to use our integrated image transformation engine to scale your images to the desired size. This will increase the loading time of your content and result in a better user experience for your visitors.", 
            "title": "Querying a Media Field"
        }, 
        {
            "location": "/Media/#graphcms-image-transformations", 
            "text": "An essential feature of GraphCMS is the image processing engine. It enables you on the fly image transformations, such as resizing or cropping just by adding parameters to your media\u00b4s URL.", 
            "title": "GraphCMS Image Transformations"
        }, 
        {
            "location": "/Media/#transformation-url-structure-with-graphcms-handle", 
            "text": "https://media.graphcms.com/[(1) Transformation Tasks]/[(2) File Handle]  1) One or multiple transformation tasks and their parameters  2) The source image to run the transformation tasks on.", 
            "title": "Transformation URL Structure with GraphCMS Handle"
        }, 
        {
            "location": "/Media/#available-transformations", 
            "text": "An overview of supported image transformations.   The maximum accepted image size is 100.000.000 pixels. An image with this many pixels could have width and height combinations like 10.000 x 10.000 or 5.000 x 20.000, etc. The maximum file size of an image can not be larger than 256mb.", 
            "title": "Available Transformations"
        }, 
        {
            "location": "/Media/#resize-fit-and-align", 
            "text": "The resizing feature comprises two main functions, manipulating the width and height of an image and changing the fit and alignment of the image.  Resize   Task   URL   Format :  https : //media.graphcms.com/resize=[options]/[File Handle]    Basic resize example with a GraphCMS file handle  https://media.graphcms.com/resize=width:300/bYbYJmGyQfynUBaBkRnP      resize=width:100   Can be abbreviated as  w:100  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.      resize=height:100   Can be abbreviated as  h:100  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.      resize=fit:clip, crop, scale, or max   Can be abbreviated as  f:clip  The default value for the fit parameter is  fit:clip .   fit:clip   Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.   fit:crop   Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.   fit:scale   Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.   fit:max   Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.      resize=align:center, top, bottom, left, right, or faces   Can be abbreviated as  a:top  Using align, you can choose the area of the image to focus on. Possible values: align:center   align:top   align:bottom   align:left   align:right   align:faces  By default, it crops from the center.\nYou can also specify pairs e.g. align:[top,left]. Center cannot be used in pairs.      Example with  resize  +  fit:crop  https://media.graphcms.com/resize=w:300,h:300,fit:crop/bYbYJmGyQfynUBaBkRnP", 
            "title": "Resize Fit and Align"
        }, 
        {
            "location": "/Media/#crop", 
            "text": "Cropping is done by entering coordinates for where the boundary of the crop will be.  Crop   Task   URL   Format :  https : //media.graphcms.com/crop=[options]/[File Handle]    crop=dim:[x,y,width,height]   Can be abbreviated as  d:[10,20,200,250]  Crops the image to a specified rectangle.  The input for this parameter must be exactly 4 integers:  x coordinate, y coordinate, width, height . For example, an input of  crop=dim:[10,20,200,250]  selects a 200x250 pixel rectangle starting 10 pixels from the left edge of the image and 20 pixels from the top edge of the image.", 
            "title": "Crop"
        }, 
        {
            "location": "/Media/#how-cropping-works", 
            "text": "The X and Y coordinates start from [0,0] and correspond to the top left hand corner of the image to be cropped. The Width and Height parameters dictate the size in pixels of the cropping rectangle once the point to start the crop at is selected by the X and Y coordinates. If you set coordinates that create a crop area that extends outside the frame of the image, then you will only receive back the part of the image that is within the crop area.    Cropping Example  Original Image: https://media.graphcms.com/resize=w:500/bXa8m7oYQdmyWpmo2I2B   Cropped Image https://media.graphcms.com/crop=dim:[2000,900,1800,1300]/resize=w:500/bXa8m7oYQdmyWpmo2I2B", 
            "title": "How cropping works"
        }, 
        {
            "location": "/Media/#chaining-transformations", 
            "text": "The transformation engine also supports task chaining. This allows you to apply multiple transformations on an image. This is simply done by seperating transformations with a  / .  URL   format   for   chaining :  https : //media.graphcms.com/[task]=[options]/[task]=[options]/[File Handle]", 
            "title": "Chaining Transformations"
        }, 
        {
            "location": "/Examples/", 
            "text": "Examples\n#\n\n\n\n\nExamples will be available soon!", 
            "title": "Examples"
        }, 
        {
            "location": "/Examples/#examples", 
            "text": "Examples will be available soon!", 
            "title": "Examples"
        }, 
        {
            "location": "/API/", 
            "text": "API\n#\n\n\n\n\nAPI documentation will be available soon!", 
            "title": "API"
        }, 
        {
            "location": "/API/#api", 
            "text": "API documentation will be available soon!", 
            "title": "API"
        }
    ]
}